#!/usr/bin/python -u
import logging
import logging.handlers
from app.interval import Interval
from app.hot_water_pump import HotWaterPumpDevice, HotWaterPumpLib
from datetime import datetime
import pytz
import subprocess
import paho.mqtt.client as mqtt


__author__ = "Richard Kubicek"
__copyright__ = "Copyright 21"
__credits__ = ["Richard Kubicek"]
__license__ = "Proprietary"
__version__ = "{{$APPVERSION$}}"  # generated by build script
__maintainer__ = "Richard Kubicek"
__email__ = "rici.kubicek@gmail.com"

logging.getLogger('eledio').setLevel(logging.ERROR)

flag_connected = 0


def on_mqtt_connect(client, userdata, flags, rc):
    global flag_connected
    flag_connected = 1


def on_mqtt_disconnect(client, userdata, rc):
    global flag_connected


if __name__ == "__main__":
    pump = HotWaterPumpDevice()
    pump_lib = HotWaterPumpLib(pump.config)
    rundown = Interval(1)
    comm_interval = Interval(15)
    logger = logging.getLogger(__name__)
    logger.info("Application started")
    reason = 0
    send_trigger = False

    mqtt_client = mqtt.Client(pump.config["mqtt_client_id"])
    mqtt_client.on_connect = on_mqtt_connect
    mqtt_client.on_disconnect = on_mqtt_disconnect
    mqtt_client.username_pw_set(pump.config["mqtt_username"], pump.config["mqtt_password"])
    mqtt_client.connect_async(host="mqtt3.thingspeak.com", port=1883)
    mqtt_client.loop_start()

    while True:
        try:
            pump.eledio.load_inputs()

            tz = pytz.timezone('Europe/Prague')
            t = datetime.now(tz)

            if pump_lib.check_time_mask(t):
                pump.eledio["pump"] = True
                reason = 1
            if pump.eledio["flowSwitch"] == 0:
                rundown = Interval(pump.config["rundown"])
                pump.eledio["pump"] = True
                reason = 2
                send_trigger = True
            if rundown.is_expired and not pump_lib.check_time_mask(t):
                pump.eledio["pump"] = False
                reason = 0

            if comm_interval.restarted() or send_trigger:
                send_trigger = False
                data = "field1={pumpState}&field2={pumpCurrent}&field3={waterTemperature}&field4={flowSwitch}" \
                       "&field5={pumpPower}&field6={pumpVoltage}&field7={runReason}".\
                    format(pumpState=pump.eledio["pump"], pumpCurrent=pump.eledio["pumpCurrent"],
                           waterTemperature=pump.eledio["waterTemperature"] if pump.eledio["waterTemperature"] else None,
                           flowSwitch=pump.eledio["flowSwitch"], pumpPower=pump.eledio["pumpActivePower"],
                           pumpVoltage=pump.eledio["pumpVoltage"], runReason=reason)
                if flag_connected:
                    mqtt_client.publish(pump.config["mqtt_topic"], data, 0, False)
                logger.debug("SEND {}".format(data))

            # apply final value to hardware
            pump.eledio.store_outputs()

            # do something else or wait some time
            pump.eledio.wait_events(1.0)
        except Exception as e:
            logger.error("Fail {}".format(e))
            """
            import traceback

            traceback.print_exc()
            with open('exception.log', 'w') as f:
                traceback.print_exc(file=f)
            """
